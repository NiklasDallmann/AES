#include <chrono>
#include <cxxutility/test.h>
#include <iostream>
#include <stdint.h>
#include <stdlib.h>
#include <vector>

#include "aesblock.h"
#include "ctrmode.h"
#include "cryptoutilities.h"

TEST_SUITE(AesTest)
{
	TEST(encrypt/decrypt)
	{
		std::vector<uint8_t> plaintext{
			0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34
		};
		
		std::vector<uint8_t> key{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		
		std::vector<uint8_t> expectedCiphertext{
			0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32
		};
		
		std::vector<uint8_t> ciphertext(plaintext.size());
		std::vector<uint8_t> decryptedPlaintext(plaintext.size());
		
		Crypto::BlockCipher::Aes128Key keyObj(key.data());
		Crypto::BlockCipher::Aes::Block128 block(keyObj);
		block.encrypt(plaintext.data(), ciphertext.data());
		
		CXX_COMPARE(ciphertext, expectedCiphertext, "AES-128");
		
		block.decrypt(ciphertext.data(), decryptedPlaintext.data());
		
		CXX_COMPARE(decryptedPlaintext, plaintext, "AES-128");
	}
	
	TEST(encrypt/decrypt)
	{
		std::vector<uint8_t> plaintext{
			0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
		};
		
		std::vector<uint8_t> key{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17		
		};
		
		std::vector<uint8_t> expectedCiphertext{
			0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91
		};
		
		std::vector<uint8_t> ciphertext(plaintext);
		std::vector<uint8_t> decryptedPlaintext(plaintext);
		
		Crypto::BlockCipher::Aes192Key keyObj(key.data());
		Crypto::BlockCipher::Aes::Block192 block(keyObj);
		block.encrypt(plaintext.data(), ciphertext.data());
		
		CXX_COMPARE(ciphertext, expectedCiphertext, "AES-192");
		
		block.decrypt(ciphertext.data(), decryptedPlaintext.data());
		
		CXX_COMPARE(decryptedPlaintext, plaintext, "AES-192");
	}
	
	TEST(encrypt/decrypt)
	{
		std::vector<uint8_t> plaintext{
			0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
		};
		
		std::vector<uint8_t> key{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
		};
		
		std::vector<uint8_t> expectedCiphertext{
			0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89
		};
		
		std::vector<uint8_t> ciphertext(plaintext);
		std::vector<uint8_t> decryptedPlaintext(plaintext);
		
		Crypto::BlockCipher::Aes256Key keyObj(key.data());
		Crypto::BlockCipher::Aes::Block256 block(keyObj);
		block.encrypt(plaintext.data(), ciphertext.data());
		
		CXX_COMPARE(ciphertext, expectedCiphertext, "AES-256");
		
		block.decrypt(ciphertext.data(), decryptedPlaintext.data());
		
		CXX_COMPARE(decryptedPlaintext, plaintext, "AES-256");
	}
	
	TEST(encrypt/decrypt)
	{
		std::vector<uint8_t> plaintext{
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		
		std::vector<uint8_t> key{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		
		std::vector<uint8_t> initializationVector{
			0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff			
		};
		
		std::vector<uint8_t> expectedCiphertext{
			0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce,
			0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b, 0xb9, 0xff, 0xfd, 0xff,
			0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f, 0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab,
			0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1, 0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee
		};
		
		std::vector<uint8_t> ciphertext(plaintext.size());
		std::vector<uint8_t> decryptedPlaintext(plaintext.size());
		
		Crypto::BlockCipher::Aes128Key keyObj(key.data());
		Crypto::Mode::Ctr<Crypto::BlockCipher::Aes::Block128>::encrypt(
				keyObj, initializationVector.data(), plaintext.data(), plaintext.size(), ciphertext.data());
		Crypto::Mode::Ctr<Crypto::BlockCipher::Aes::Block128>::decrypt(
				keyObj, initializationVector.data(), ciphertext.data(), ciphertext.size(), decryptedPlaintext.data());
		
		CXX_COMPARE(ciphertext, expectedCiphertext, "AES-128 CTR");
		CXX_COMPARE(decryptedPlaintext, plaintext, "AES-128 CTR");
	}
	
	TEST(encrypt)
	{
		std::vector<uint8_t> plaintext(22000);
		
		// Generate plaintext
		for (uint32_t byte = 0; byte < sizeof (plaintext); byte++)
		{
			plaintext[byte] = uint8_t(byte);
		}
		
		std::vector<uint8_t> key{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		
		std::vector<uint8_t> initializationVector{
			0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff			
		};
		
		std::vector<uint8_t> ciphertext(plaintext.size());
		std::vector<uint8_t> decryptedPlaintext(plaintext.size());
		
		Crypto::BlockCipher::Aes128Key keyObj(key.data());
		Crypto::BlockCipher::Aes::Block128 block(keyObj);
		
		auto benchmarkLambda = [&keyObj, &initializationVector, &plaintext, &ciphertext](){
			Crypto::Mode::Ctr<Crypto::BlockCipher::Aes::Block128>::encrypt(
					keyObj, initializationVector.data(), plaintext.data(), plaintext.size(), ciphertext.data());
		};
		
		CXX_BENCHMARK(benchmarkLambda, 100000u, plaintext.size(), "AES-128-CTR");
	}
};
